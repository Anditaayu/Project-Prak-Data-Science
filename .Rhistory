library(ggplot2)    #untuk memvisualisasikan data
library(cluster)    #untuk menganalisis kluster
library(factoextra) #untuk mengekstrak dan memvisualisasikan hasil analisis multivariant
library(shiny)      #untuk membuat tampilan GUI
library(kernlab)
library(readxl)     #untuk membaca file excel
#menampilkan dataset dengan variabel objek data1
here()
data1 <- read_excel(here("tingkatperkembangandesa.xlsx"))
data1
#menampilkan struktur dataset
str(data1)
#menampilkan ringkasan deskriptif data
summary(data1)
#mempersempit jangkauan data analisis dengan menyaring data
data2 <- data1 %>% filter(data1$PROVINSI == "LAMPUNG")
data2
#menghapus data yang tidak digunakan dan mengubah nama kolom
databaru <- data2 %>% select(-1:-6,-10,-11) %>% rename(bidang_pemerintahan = 'BIDANG PEMERINTAHAN', bidang_kewilayahan = 'BIDANG KEWILAYAHAN', bidang_kemasyarakatan = 'BIDANG KEMASYARAKATAN')
#menampilkan kolom yang digunakan saja dalam bentuk data frame
datadesa = data.frame(databaru)
datadesa
#melakukan tranformasi data menggunakan scalling data : nilai - mean / standar deviasi
datafix <- scale(datadesa)
datafix
#menampilkan data baru dalam bentuk data frame
view(datadesa)
# memvisualisasikan jumlah cluster yang optimal
# METODE  ELBOW atau WSS
# dilihat dari grafik yang mulai landai dari yang pertama setelah curam
fviz_nbclust(datafix, kmeans, method = "wss")
# METODE SILHOUETTE
# dilihat dari garis tertingi berikutnya
fviz_nbclust(datafix, kmeans, method = "silhouette")
# METODE GAP STATISTIC
# dilihat dari titik tertinggi setelah garis putus putus
dim(datadesa)
set.seed(9999)      #Mengunci data, nilainya ditentukan sendiri
gap_stat <-clusGap(datafix, FUN=kmeans, nstart=300, K.max=3, B= 1594)
fviz_gap_stat(gap_stat) #memperkirakan jumlah cluster
#Jadi dari 3 metode menghasilkan jumlah cluster yang sama yaitu 3
final <- kmeans(datafix, 3)
final
#memvisualisasi hasil klasterisasi
fviz_cluster(final, data = datafix )
datadesa %>%
mutate(Cluster = final$cluster) %>%
group_by(Cluster) %>%
summarise_all("mean")
finaldata=data.frame(datafix, final$cluster)
View(finaldata)
#jika kluster masih ada yg saling menimpa maka belum dapat dikatakan ideal
ui <- fluidPage(
titlePanel("HASIL ANALISIS CLUSTERING"),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Data", DT::dataTableOutput('tbl')),
tabPanel("Metode WSS", plotOutput("metode1")),
tabPanel("Metode Silhouette", plotOutput("metode2")),
tabPanel("Metode Gap Statistic", plotOutput("metode3")),
tabPanel("Clustering", plotOutput("cluster"))
)
)
)
server <- function(input,output){
output$tbl = DT::renderDataTable({
DT::datatable(finaldata, options= list(lengthChange = FALSE))
})
output$metode1 <- renderPlot({
fviz_nbclust(datafix, kmeans, method = "wss")
})
output$metode2 <- renderPlot({
fviz_nbclust(datafix, kmeans, method = "silhouette")
})
output$metode3 <- renderPlot({
gap_stat <-clusGap(datafix, FUN=kmeans, nstart=300, K.max=3, B= 1594)
fviz_gap_stat(gap_stat)
})
output$cluster <- renderPlot({
fviz_cluster(final, data = datafix )
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("HASIL ANALISIS CLUSTERING"),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Metode WSS", plotOutput("metode1")),
tabPanel("Metode Silhouette", plotOutput("metode2")),
tabPanel("Metode Gap Statistic", plotOutput("metode3")),
tabPanel("Data", DT::dataTableOutput('tbl')),
tabPanel("Clustering", plotOutput("cluster")),
tabPanel("Finalisasi", plotOutput("simpulan"))
)
)
)
server <- function(input,output){
output$metode1 <- renderPlot({
fviz_nbclust(datafix, kmeans, method = "wss")
})
output$metode2 <- renderPlot({
fviz_nbclust(datafix, kmeans, method = "silhouette")
})
output$metode3 <- renderPlot({
gap_stat <-clusGap(datafix, FUN=kmeans, nstart=300, K.max=3, B= 1594)
fviz_gap_stat(gap_stat)
})
output$tbl = DT::renderDataTable({
DT::datatable(finaldata, options= list(lengthChange = FALSE))
})
output$cluster <- renderPlot({
fviz_cluster(final, data = datafix )
})
output$simpulan <- renderPlot({
final
finaldata
})
}
shinyApp(ui = ui, server = server)
boxplot(datafix)
boxplot(datafix)
corrplot(cor(datafix),method="ellipse",type="upper")
boxplot(datafix)
pairs(datafix, final$cluster,pch=16)
boxplot(datafix)
pairs(datafix,col=c(1:3)[final$cluster],pch=16)
ui <- fluidPage(
titlePanel("HASIL ANALISIS CLUSTERING"),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Metode WSS", plotOutput("metode1")),
tabPanel("Metode Silhouette", plotOutput("metode2")),
tabPanel("Metode Gap Statistic", plotOutput("metode3")),
tabPanel("Data", DT::dataTableOutput('tbl')),
tabPanel("Clustering", plotOutput("cluster")),
tabPanel("Finalisasi", plotOutput("simpulan"))
)
)
)
server <- function(input,output){
output$metode1 <- renderPlot({
fviz_nbclust(datafix, kmeans, method = "wss")
})
output$metode2 <- renderPlot({
fviz_nbclust(datafix, kmeans, method = "silhouette")
})
output$metode3 <- renderPlot({
gap_stat <-clusGap(datafix, FUN=kmeans, nstart=300, K.max=3, B= 1594)
fviz_gap_stat(gap_stat)
})
output$tbl = DT::renderDataTable({
DT::datatable(finaldata, options= list(lengthChange = FALSE))
})
output$cluster <- renderPlot({
fviz_cluster(final, data = datafix )
})
output$simpulan <- renderPlot({
final
finaldata
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("HASIL ANALISIS CLUSTERING"),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Metode WSS", plotOutput("metode1")),
tabPanel("Metode Silhouette", plotOutput("metode2")),
tabPanel("Metode Gap Statistic", plotOutput("metode3")),
tabPanel("Data", DT::dataTableOutput('tbl')),
tabPanel("Clustering", plotOutput("cluster")),
tabPanel("Finalisasi", plotOutput("simpulan"))
)
)
)
server <- function(input,output){
output$metode1 <- renderPlot({
fviz_nbclust(datafix, kmeans, method = "wss")
})
output$metode2 <- renderPlot({
fviz_nbclust(datafix, kmeans, method = "silhouette")
})
output$metode3 <- renderPlot({
gap_stat <-clusGap(datafix, FUN=kmeans, nstart=300, K.max=3, B= 1594)
fviz_gap_stat(gap_stat)
})
output$tbl = DT::renderDataTable({
DT::datatable(finaldata, options= list(lengthChange = FALSE))
})
output$cluster <- renderPlot({
fviz_cluster(final, data = datafix )
})
output$simpulan <- renderPlot({
final
finaldata
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("HASIL ANALISIS CLUSTERING"),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Metode WSS", plotOutput("metode1")),
tabPanel("Metode Silhouette", plotOutput("metode2")),
tabPanel("Metode Gap Statistic", plotOutput("metode3")),
tabPanel("Data", DT::dataTableOutput('tbl')),
tabPanel("Clustering", plotOutput("cluster")),
tabPanel("Finalisasi", plotOutput("simpulan"))
)
)
)
server <- function(input,output){
output$metode1 <- renderPlot({
fviz_nbclust(datafix, kmeans, method = "wss")
})
output$metode2 <- renderPlot({
fviz_nbclust(datafix, kmeans, method = "silhouette")
})
output$metode3 <- renderPlot({
gap_stat <-clusGap(datafix, FUN=kmeans, nstart=300, K.max=3, B= 1594)
fviz_gap_stat(gap_stat)
})
output$tbl = DT::renderDataTable({
DT::datatable(finaldata, options= list(lengthChange = FALSE))
})
output$cluster <- renderPlot({
fviz_cluster(final, data = datafix )
})
output$simpulan <- renderPlot({
finaldata
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("HASIL ANALISIS CLUSTERING"),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Metode WSS", plotOutput("metode1")),
tabPanel("Metode Silhouette", plotOutput("metode2")),
tabPanel("Metode Gap Statistic", plotOutput("metode3")),
tabPanel("Data", DT::dataTableOutput('tbl')),
tabPanel("Clustering", plotOutput("cluster")),
tabPanel("Finalisasi", plotOutput("simpulan"))
)
)
)
server <- function(input,output){
output$metode1 <- renderPlot({
fviz_nbclust(datafix, kmeans, method = "wss")
})
output$metode2 <- renderPlot({
fviz_nbclust(datafix, kmeans, method = "silhouette")
})
output$metode3 <- renderPlot({
#gap_stat <-clusGap(datafix, FUN=kmeans, nstart=300, K.max=3, B= 1594)
#fviz_gap_stat(gap_stat)
})
output$tbl = DT::renderDataTable({
DT::datatable(finaldata, options= list(lengthChange = FALSE))
})
output$cluster <- renderPlot({
fviz_cluster(final, data = datafix )
})
output$simpulan <- renderPlot({
datadesa %>%
mutate(Cluster = final$cluster) %>%
group_by(Cluster) %>%
summarise_all("mean")
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("HASIL ANALISIS CLUSTERING"),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Metode WSS", plotOutput("metode1")),
tabPanel("Metode Silhouette", plotOutput("metode2")),
tabPanel("Metode Gap Statistic", plotOutput("metode3")),
tabPanel("Data", DT::dataTableOutput('tbl')),
tabPanel("Clustering", plotOutput("cluster")),
tabPanel("Finalisasi", plotOutput("simpulan"))
)
)
)
server <- function(input,output){
output$metode1 <- renderPlot({
fviz_nbclust(datafix, kmeans, method = "wss")
})
output$metode2 <- renderPlot({
fviz_nbclust(datafix, kmeans, method = "silhouette")
})
output$metode3 <- renderPlot({
#gap_stat <-clusGap(datafix, FUN=kmeans, nstart=300, K.max=3, B= 1594)
#fviz_gap_stat(gap_stat)
})
output$tbl = DT::renderDataTable({
DT::datatable(finaldata, options= list(lengthChange = FALSE))
})
output$cluster <- renderPlot({
fviz_cluster(final, data = datafix )
})
output$simpulan <- renderPlot({
d <- datadesa %>%
mutate(Cluster = final$cluster) %>%
group_by(Cluster) %>%
summarise_all("mean")
DT::datatable(d, options= list(lengthChange = FALSE))
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("HASIL ANALISIS CLUSTERING"),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Metode WSS", plotOutput("metode1")),
tabPanel("Metode Silhouette", plotOutput("metode2")),
tabPanel("Metode Gap Statistic", plotOutput("metode3")),
tabPanel("Data", DT::dataTableOutput('tbl')),
tabPanel("Clustering", plotOutput("cluster")),
tabPanel("Finalisasi", plotOutputDT::dataTableOutput("simpulan"))
)
)
)
ui <- fluidPage(
titlePanel("HASIL ANALISIS CLUSTERING"),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Metode WSS", plotOutput("metode1")),
tabPanel("Metode Silhouette", plotOutput("metode2")),
tabPanel("Metode Gap Statistic", plotOutput("metode3")),
tabPanel("Data", DT::dataTableOutput('tbl')),
tabPanel("Clustering", plotOutput("cluster")),
tabPanel("Finalisasi", plotOutputDT::dataTableOutput("simpulan"))
)
)
)
ui <- fluidPage(
titlePanel("HASIL ANALISIS CLUSTERING"),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Metode WSS", plotOutput("metode1")),
tabPanel("Metode Silhouette", plotOutput("metode2")),
tabPanel("Metode Gap Statistic", plotOutput("metode3")),
tabPanel("Data", DT::dataTableOutput('tbl')),
tabPanel("Clustering", plotOutput("cluster")),
tabPanel("Finalisasi", DT::dataTableOutput("simpulan"))
)
)
)
server <- function(input,output){
output$metode1 <- renderPlot({
fviz_nbclust(datafix, kmeans, method = "wss")
})
output$metode2 <- renderPlot({
fviz_nbclust(datafix, kmeans, method = "silhouette")
})
output$metode3 <- renderPlot({
#gap_stat <-clusGap(datafix, FUN=kmeans, nstart=300, K.max=3, B= 1594)
#fviz_gap_stat(gap_stat)
})
output$tbl = DT::renderDataTable({
DT::datatable(finaldata, options= list(lengthChange = FALSE))
})
output$cluster <- renderPlot({
fviz_cluster(final, data = datafix )
})
output$simpulan <- DT::renderDataTable({
d <- datadesa %>%
mutate(Cluster = final$cluster) %>%
group_by(Cluster) %>%
summarise_all("mean")
DT::datatable(d, options= list(lengthChange = FALSE))
})
}
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)  #data tidying
library(dplyr)      #untuk memanipulasi data
library(here)       #untuk menyimpan dataset
library(ggplot2)    #untuk memvisualisasikan data
library(cluster)    #untuk menganalisis kluster
library(factoextra) #untuk mengekstrak dan memvisualisasikan hasil analisis multivariant
library(shiny)      #untuk membuat tampilan GUI
library(kernlab)
library(readxl)     #untuk membaca file excel
#menampilkan dataset dengan variabel objek data1
here()
data1 <- read_excel(here("tingkatperkembangandesa.xlsx"))
data1
#menampilkan struktur dataset
str(data1)
#menampilkan ringkasan deskriptif data
summary(data1)
#mempersempit jangkauan data analisis dengan menyaring data
data2 <- data1 %>% filter(data1$PROVINSI == "LAMPUNG")
data2
#menghapus data yang tidak digunakan dan mengubah nama kolom
databaru <- data2 %>% select(-1:-6,-10,-11) %>% rename(bidang_pemerintahan = 'BIDANG PEMERINTAHAN', bidang_kewilayahan = 'BIDANG KEWILAYAHAN', bidang_kemasyarakatan = 'BIDANG KEMASYARAKATAN')
#menghapus data yang tidak digunakan dan mengubah nama kolom
databaru <- data2 %>% select(-1:-6,-10) %>% rename(bidang_pemerintahan = 'BIDANG PEMERINTAHAN', bidang_kewilayahan = 'BIDANG KEWILAYAHAN', bidang_kemasyarakatan = 'BIDANG KEMASYARAKATAN')
#menampilkan kolom yang digunakan saja dalam bentuk data frame
datadesa = data.frame(databaru)
datadesa
#melakukan tranformasi data menggunakan scalling data : nilai - mean / standar deviasi
datafix <- scale(datadesa)
datafix
#menampilkan data baru dalam bentuk data frame
view(datadesa)
# memvisualisasikan jumlah cluster yang optimal
# METODE  ELBOW atau WSS
# dilihat dari grafik yang mulai landai dari yang pertama setelah curam
fviz_nbclust(datafix, kmeans, method = "wss")
# METODE SILHOUETTE
# dilihat dari garis tertingi berikutnya
fviz_nbclust(datafix, kmeans, method = "silhouette")
# METODE GAP STATISTIC
# dilihat dari titik tertinggi setelah garis putus putus
dim(datadesa)
set.seed(9999)      #Mengunci data, nilainya ditentukan sendiri
gap_stat <-clusGap(datafix, FUN=kmeans, nstart=300, K.max=3, B= 1594)
fviz_gap_stat(gap_stat) #memperkirakan jumlah cluster
#Jadi dari 3 metode menghasilkan jumlah cluster yang sama yaitu 3
#menampilkan kolom yang digunakan saja dalam bentuk data frame
datadesa = data.frame(databaru)
datadesa
#melakukan tranformasi data menggunakan scalling data : nilai - mean / standar deviasi
datafix <- scale(datadesa)
datafix
#visualisasi data transformasi scaling
boxplot(datafix)
#menampilkan data baru dalam bentuk data frame
view(datadesa)
final <- kmeans(datafix, 3)
final
ui <- fluidPage(
titlePanel("HASIL ANALISIS CLUSTERING"),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Metode WSS", plotOutput("metode1")),
tabPanel("Metode Silhouette", plotOutput("metode2")),
tabPanel("Metode Gap Statistic", plotOutput("metode3")),
tabPanel("Data", DT::dataTableOutput('tbl')),
tabPanel("Clustering", plotOutput("cluster")),
tabPanel("Finalisasi", DT::dataTableOutput("simpulan"))
)
)
)
server <- function(input,output){
output$metode1 <- renderPlot({
fviz_nbclust(datafix, kmeans, method = "wss")
})
output$metode2 <- renderPlot({
fviz_nbclust(datafix, kmeans, method = "silhouette")
})
output$metode3 <- renderPlot({
#gap_stat <-clusGap(datafix, FUN=kmeans, nstart=300, K.max=3, B= 1594)
#fviz_gap_stat(gap_stat)
})
output$tbl = DT::renderDataTable({
DT::datatable(finaldata, options= list(lengthChange = FALSE))
})
output$cluster <- renderPlot({
fviz_cluster(final, data = datafix )
})
output$simpulan <- DT::renderDataTable({
d <- datadesa %>%
mutate(Cluster = final$cluster) %>%
group_by(Cluster) %>%
summarise_all("mean")
DT::datatable(d, options= list(lengthChange = FALSE))
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("HASIL ANALISIS CLUSTERING"),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Metode WSS", plotOutput("metode1")),
tabPanel("Metode Silhouette", plotOutput("metode2")),
tabPanel("Metode Gap Statistic", plotOutput("metode3")),
tabPanel("Data", DT::dataTableOutput('tbl')),
tabPanel("Clustering", plotOutput("cluster")),
tabPanel("Finalisasi", DT::dataTableOutput("simpulan"))
)
)
)
server <- function(input,output){
output$metode1 <- renderPlot({
fviz_nbclust(datafix, kmeans, method = "wss")
})
output$metode2 <- renderPlot({
fviz_nbclust(datafix, kmeans, method = "silhouette")
})
output$metode3 <- renderPlot({
gap_stat <-clusGap(datafix, FUN=kmeans, nstart=300, K.max=3, B= 1594)
fviz_gap_stat(gap_stat)
})
output$tbl = DT::renderDataTable({
DT::datatable(finaldata, options= list(lengthChange = FALSE))
})
output$cluster <- renderPlot({
fviz_cluster(final, data = datafix )
})
output$simpulan <- DT::renderDataTable({
d <- datadesa %>%
mutate(Cluster = final$cluster) %>%
group_by(Cluster) %>%
summarise_all("mean")
DT::datatable(d, options= list(lengthChange = FALSE))
})
}
shinyApp(ui = ui, server = server)
